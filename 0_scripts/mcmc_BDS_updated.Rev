################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   conditioned birth-death-shift model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

for (i in 1:100){
data = readDiscreteCharacterData("2_seqdata_simseqbd/seq_sim_"+i+".nex")

# Read in the observed phylogeny
observed_phylogeny <- readTrees("1_data_simtreebd/simbdstree"+i+".nex")[1]

# Get the names of the taxa in the tree and the age of the tree. We need these later on.
taxa <- observed_phylogeny.taxa()
num_taxa <- data.ntaxa()
root <- observed_phylogeny.rootAge()
tree_length <- observed_phylogeny.treeLength()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


# Global parameters for our analysis
NUM_TOTAL_SPECIES     = 50
NUM_RATE_CATEGORIES   = 4
H = 0.587405

####################
# Create the rates #
####################

### Specify a prior on the speciation and extinction rates
rate_mean <- (NUM_TOTAL_SPECIES-2) / tree_length

### Create a lognormal distributed variable for the mean speciation rate
speciation_mean ~ dnLoguniform( 1E-6, 1E2)
speciation_mean.setValue( rate_mean )
moves.append( mvScale(speciation_mean, lambda=1, tune=true, weight=2.0) )

speciation_sd ~ dnExponential( 1.0 / H )
moves.append( mvScale(speciation_sd, lambda=1, tune=true, weight=2.0) )

### Create a deterministic variable for the speciation rate categories
### using a discretized lognormal distribution (the N-quantiles of it)
speciation := fnDiscretizeDistribution( dnLognormal(ln(speciation_mean), speciation_sd), NUM_RATE_CATEGORIES )

### Create a lognormal distributed variable for the mean extinction rate
extinction_mean ~ dnLoguniform( 1E-6, 1E2)
extinction_mean.setValue( rate_mean / 2.0 )
moves.append( mvScale(extinction_mean, lambda=1, tune=true, weight=2.0) )

### Create a deterministic variable for the extinction rate categories
### Assume that all extinction rates are equal
extinction := rep(extinction_mean, NUM_RATE_CATEGORIES)

### Create a exponential distributed variable for the rate of rate-shift events
event_rate ~ dnUniform(0.0, 100.0/tree_length)
moves.append( mvScale(event_rate, lambda=1, tune=true, weight=2.0) )

### Create a uniformly distributed variable for the category at the root
rate_cat_probs <- simplex( rep(1, NUM_RATE_CATEGORIES) )


### rho is the probability of sampling species at the present
rho <- observed_phylogeny.ntips() / NUM_TOTAL_SPECIES

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction,
                    Q                 = fnJC(NUM_RATE_CATEGORIES),
                    delta             = event_rate,
                    pi                = rate_cat_probs,
                    rho               = rho,
                    condition         = "survival" )

### initialize the tips of the tree
timetree.setValue(observed_phylogeny)

moves.append( mvNarrow(timetree, weight=num_taxa) )
moves.append( mvFNPR(timetree, weight=num_taxa/4) )
moves.append( mvNodeTimeSlideUniform(timetree, weight=num_taxa) )


###################
# PhyloCTMC Model #
###################

# Create a constant variable for the rate matrix
Q <- fnJC(4)

# Draw branch lengths from a relaxed molecular clock model
clock_rate ~ dnExponential( 1.0 )
moves.append( mvScale( clock_rate, weight=2 ) )

n_branches <- observed_phylogeny.ntips()*2-2

for ( j in 1:n_branches ) {
   branch_rate[j] ~ dnLognormal(ln(clock_rate)-0.5*0.3^2,sd=0.3)
   moves.append( mvScale( branch_rate[j], weight=2 ) )
}

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=timetree, Q=Q, branchRates=branch_rate, type="DNA")

# attach the data
seq.clamp(data)

#############
# The Model #
#############

### workspace model wrapper ###
mymodel = model(timetree)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnScreen(printgen=100, event_rate, speciation_mean) )
monitors.append( mnStochasticBranchRate(cdbdp=timetree, printgen=100, filename="4_seqInference/seq_sim"+i+".trees") )
monitors.append( mnModel(filename="4_seqInference/seq_sim"+i+".log",printgen=100, separator = TAB) )
monitors.append( mnExtNewick(timetree,filename="4_seqInference/posteriortreesoonseq"+i+".nex",printgen=50)) 

################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

### run the MCMC
mymcmc.run(generations=20000, tuningInterval=200)

###################
# Post processing #
###################

# Now, we will analyze the tree seqInference.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("4_seqInference/seq_sim"+i+".trees", treetype="non-clock")
# and then get the MAP tree
map_tree = mapTree(treetrace,"4_seqInference/seq_sim"+i+".tree")

}
# quit RevBayes now
q()
